@startuml

package "Pattern Factory"{
    class Machine{}
    package "Pattern Facade"{
        class Order{

            +Order(Payment,Product):Order
            evaluate(): boolean
        }
        note left: Fasada ukrywa wykonanie zadania jedynie\nudosteniajac mozliwosc jego wykonania\nMetoda evaluate ukrywa "szczegolowe"\nwykonanie zadania
    }
    class OrderFactory{}
    note "Na podstawie danych wejsciowych klasa decyduje jakiego typu klasy\n'wlozyc' do Order" as N1
    N1 .. OrderFactory
}
package "Pattern Command" {
    enum PaymentType{}
    class OrderDto{}
    class MainController{}
    note right: Wysyla polecania z interfejsu do Machine,\nktory to "przetwarza"\nakcje uzytkownika
}
package "Pattern State"{
    class Product{
    state : ProductState
    }
    note left: Zalezenie od stanu (state) inne\nzachowanie obiektu
    enum ProductState{
        -Name
    }
    Product<..ProductState
}
package "Pattern Singleton" {
    class ProductExtent{
        - ProductExtent
        -ProductExtent()
      {static}  +getInstance():ProductExtent
    }
    note left: Nie pozawala na stworzenie instancji\noprocz jednej globalnej i globanie dostepnej
}
ProductExtent *-- Product
package Payments {
interface Payment{}
class CardPayment{}
class CashPayment{}
 Payment .. CardPayment
Payment .. CashPayment
}
Order "1"--"1" Payment
Order "1"--"1" Product
Machine "1"*--"*"Order
Machine "1"<--"1" OrderFactory
OrderFactory ..> Order: Produkuje Order
MainController "1"--"1" Machine
MainController..>OrderDto
OrderDto..>Machine
PaymentType "1"--"*"OrderDto

@enduml